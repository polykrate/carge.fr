# Carge 

> **AI-powered supply chain transparency on Polkadot**  
> Creators prove authenticity. Consumers verify provenance. No code required.

**🎯 TL;DR**: Carge makes blockchain-verified supply chains accessible to **non-technical creators** (winemakers, coffee farmers, artisans). Describe your supply chain to AI in natural language → Get a production-ready Substrate workflow in 5 minutes. Consumers verify authenticity by scanning a QR code. No installation, no crypto knowledge needed.

**The value for Polkadot ecosystem**: First permissionless PKI on Substrate that **ordinary people can actually use**. Brings real-world creators (not just developers) to Polkadot by hiding complexity behind AI + browser-based UX.

```
┌─────────────────┐                    ┌──────────────────┐
│  Creator        │  "I make organic  │   AI Builder     │
│  (No tech)      │───coffee in────────>│  (ChatGPT/Claude)│
│                 │   Colombia"        │                  │
└─────────────────┘                    └────────┬─────────┘
                                                │
                                                │ Generates
                                                │ validated JSON
                                                ▼
                                       ┌────────────────────┐
                                       │ Substrate Workflow │
                                       │ (pallet-rag)       │
                                       │ + IPFS schemas     │
                                       └─────────┬──────────┘
                                                 │
                          Single signature ◄─────┘
                          (batch deployment)
                                                 │
                                                 ▼
                    ┌────────────────────────────────────────────┐
                    │   Live Workflow Execution                  │
                    │   Producer → Processor → Exporter → Retail │
                    │   (encrypted, privacy-preserving)          │
                    └─────────────────┬──────────────────────────┘
                                      │
                                      │ QR code on product
                                      ▼
                            ┌─────────────────────┐
                            │   Consumer          │
                            │   (Scan to verify)  │
                            │   ✅ Authentic      │
                            │   ✅ Full history   │
                            └─────────────────────┘
```

**What changed during this hackathon**: The code existed. What was missing was **making it accessible**. This hackathon focused on UX and real-world applications—not building more pallets, but making Polkadot usable by people who've never heard of Substrate.

[🎬 Watch Demo](https://carge.fr) | [📺 Video (3min)](#) | [🧪 Live Testnet](https://carge.fr/ai)

---

## 💡 Inspiration: The Complexity Threshold

**The paradox**: Nobel laureate Ronald Coase explained why centralized firms dominate: **coordination costs in decentralized systems typically exceed the cost of hierarchy**. Centralized solutions are economically superior—economies of scale, rapid decisions, simplified management.

**Until they're not.**

Centralized systems work brilliantly for simple coordination. But **beyond a certain complexity threshold**—multiple competing jurisdictions, zero pre-existing trust, conflicting interests—centralized control becomes impossible. No single authority can be trusted by all parties. **That's when decentralization becomes necessary, not despite its costs, but because centralized systems simply stop functioning.**

### **The institutional proof: EBSI**

The European Union recognized this threshold. When coordinating 27 sovereign nations with competing interests, no single trusted authority exists. That's why the EU launched **EBSI (European Blockchain Services Infrastructure)**—a permissionless blockchain for cross-border credentials and identity.

**The lesson**: Decentralization works painfully where centralization fails completely.

### **Supply chains cross the same threshold**

Multi-party supply chains face identical complexity:
- **Competing actors**: Each party has commercial secrets (volumes, prices, margins)
- **Zero pre-existing trust**: A Chinese exporter doesn't trust a European distributor
- **Need for transparency**: Consumers demand verifiable proof of origin
- **Privacy requirements**: Competitors in the same chain cannot see each other's data

**This complexity creates a specific problem for creators and producers**: A small winemaker in Bordeaux, a coffee farmer in Colombia, or a craft distillery in Scotland cannot prove their product's authenticity to consumers without trusting a centralized intermediary. But who controls that intermediary? The distributor? The retailer? The government? Each option creates a power imbalance where the producer loses control of their story and value capture.

**Consumers face the same trust problem**: They want to pay premium prices for authentic, traceable products—but how can they verify provenance when every actor in the chain has an incentive to lie, and the verification system is controlled by one of those actors?

**Traditional centralized solutions fail at this threshold**:
- Who hosts the database? Whose jurisdiction? Who pays? (The host becomes the rent-seeker)
- Who has access? What prevents the platform from extracting value? (The middleman problem)
- What prevents censorship or selective data deletion? (The producer loses control)

### **Why existing PKI solutions don't work**

**Traditional PKI (X.509, Certificate Authorities)**:
- **Deconcentrated, not decentralized**: Multiple CAs exist, but each is a trusted hierarchy
- **Revocation power**: Authorities can revoke certificates unilaterally
- **Government coercion**: CAs can be forced to issue or revoke certificates (see: CNNIC, DigiNotar)

**Blockchain PKI (Hyperledger Fabric)**:
- **Permissioned networks**: Consortium members control access
- **Centralized trust**: Just distributed among fewer parties, not eliminated
- **Governance bottleneck**: Who decides who joins?

### **Carge: True decentralization for supply chains**

Carge is built on Substrate as a **permissionless PKI** where:
- **No authority can revoke**: Cryptographic proofs are immutable
- **Privacy by design**: Each actor sees only their data, encrypted for designated recipients
- **Censorship-resistant**: No entity can delete or alter proofs
- **Direct value capture**: Producers connect directly with consumers, building trust through verifiable provenance

**Traditional PKI vs Carge**:
- **Traditional (deconcentrated)**: Trust flows from Root CA → Intermediate CA → Certificate. Authority can revoke.
- **Carge (decentralized)**: Trust flows from cryptographic proof consistency. Your identity is your key. No revocation—validity depends on math, not authority.

### **Minimizing decentralization costs**

Decentralization is expensive. Carge addresses these costs through:
- **AI-assisted process deployment**: Natural language to blockchain (NO CODE)—reduces coordination costs by 90%
- **Economic staking**: Solves free-rider problems with skin-in-the-game incentives
- **Browser-based dApp**: Zero installation, making execution and verification accessible to anyone with a phone

**The bet**: For supply chain transparency—creators, artisans, small producers, luxury brands—**the value of cryptographic proof exceeds the cost of decentralization**. We've crossed the complexity threshold where centralized systems stop working.

Carge makes Web3 accessible to ordinary people, not just institutions or technical experts.

---

## 🎯 What it does

**Carge is a decentralized PKI for workflow execution built on Substrate.**

It combines four innovations:

1. **AI-Powered Workflow Builder**: Natural language workflow creation with intelligent validation and blockchain deployment optimization
2. **Decentralized PKI** (`pallet-pki`): Each participant has a cryptographic identity anchored on-chain with X25519 exchange keys and libp2p peer IDs for encrypted cid transmissions
3. **Multi-actor workflows** (`pallet-crypto-trail`): Send and receive encrypted deliverables on-chain between participants. Each step's output is encrypted, transmitted via IPFS, and only decryptable by the designated recipient—no external channels needed
4. **RAG workflow storage** (`pallet-rag`): Multi-step workflow schemas stored as IPFS CIDs on-chain with tag-based search

**Primary use case**: Supply chain transparency to enhance product value. Each step (manufacturing, transport, retail) is cryptographically signed, creating verifiable proof of authenticity that consumers can trust.

**Unique feature**: AI agents (Claude, ChatGPT, etc.) can interview users about their supply chain needs and automatically generate deployment-ready blockchain workflows, handling all cryptographic complexity and IPFS storage transparently.

---

## 🔧 How I built it

### **Substrate Custom Pallets**

Carge is built on **three custom Substrate pallets**, deployed on a Tanssi appchain candidate:

#### 1️⃣ **`pallet-pki`** - Public Key Infrastructure

**Purpose**: Decentralized identity management for workflow participants

**Key features**:
- **Exchange keys**: X25519 public keys (32 bytes) for ECDH key exchange
- **Peer IDs**: Libp2p peer identifiers (38 bytes) for P2P network coordination
- **Profile CIDs**: Optional IPFS CID v1 (36 bytes) for extended profile data
- **TTL management**: Automatic expiration and cleanup of stale keys
- **Staking**: Anti-spam protection with minimum stake requirement

**Storage**:
```rust
pub struct PkiProfile<T: Config> {
    pub exchange_key: [u8; 32],        // X25519 public key for ECDH
    pub peer_id: [u8; 38],             // Libp2p multiaddr peer ID
    pub profile_cid: Option<[u8; 36]], // IPFS CID v1 (optional)
    pub staked_amount: Balance,         // Staked currency
    pub created_at: BlockNumber,        // Creation block
    pub expires_at: BlockNumber,        // TTL expiration
}
```

**Use case**: Before executing a workflow step, Alice retrieves Bob's X25519 `exchange_key` from his PKI profile to perform ECDH key exchange, then encrypts the next step's CID and sends it to Bob's `peer_id` via IPFS.

---

#### 2️⃣ **`pallet-crypto-trail`** - Cryptographic Workflow Trails

**Purpose**: Immutable storage of encrypted workflow steps with cryptographic proofs

**Key features**:
- **Encrypted CIDs**: ChaCha20-Poly1305 encrypted IPFS CIDs (52 bytes: 36 + 16 MAC)
- **Ephemeral keys**: Alice's ephemeral public key (32 bytes) for ECDH key exchange
- **Dual nonces**: Separate nonces for CID encryption (12 bytes) and content encryption (12 bytes)
- **Content CID**: Clear IPFS CID v1 (36 bytes) for content indexing
- **Substrate signatures**: Sr25519 signatures (64 bytes) for authenticity
- **TTL + Staking**: Time-to-live with economic security

**Storage**:
```rust
pub struct CryptoTrail<T: Config> {
    pub creator: AccountId,                  // Who created this trail
    pub encrypted_cid: [u8; 52],             // Encrypted CID + MAC
    pub ephemeral_pubkey: [u8; 32],          // Alice's ephemeral key
    pub cid_nonce: [u8; 12],                 // Nonce for CID encryption
    pub content_nonce: [u8; 12],             // Nonce for content encryption
    pub content_cid: [u8; 36],               // Clear CID for indexing
    pub substrate_signature: [u8; 64],       // Sr25519 signature
    pub staked_amount: Balance,              // Economic stake
    pub created_at: BlockNumber,             // Creation block
    pub expires_at: BlockNumber,             // TTL expiration
}
```

**Cryptography workflow**:
1. Alice generates X25519 ephemeral keypair `(ephemeral_sk, ephemeral_pk)`
2. Alice retrieves Bob's X25519 `exchange_key` from his PKI profile
3. Alice computes shared secret: `shared_secret = X25519_ECDH(ephemeral_sk, bob_exchange_key)`
4. Alice derives encryption key: `key = HKDF(shared_secret)`
5. Alice encrypts next step CID: `encrypted_cid = ChaCha20-Poly1305(key, cid_nonce, next_step_cid)`
6. Alice signs the trail with her Substrate key: `signature = Sr25519_Sign(substrate_sk, content_hash)`
7. Alice submits extrinsic to store trail on-chain
8. The extrinsic **verifies the Sr25519 signature on-chain** before accepting the storage
9. Trail stored with `ephemeral_pk` (Bob will use it to decrypt)

**Indexed by**: `content_cid` (allows anyone to verify a proof by its content hash)

---

#### 3️⃣ **`pallet-rag`** - RAG Metadata & Workflow Schemas

**Purpose**: Store and retrieve workflow definitions with Retrieval-Augmented Generation metadata

**Key features**:
- **Triple CID storage**: Instruction CID, Resource CID, Schema CID (3×36 bytes)
- **Multi-step workflows**: Up to 64 workflow steps (each 32-byte hash)
- **Metadata**: Name (50 chars), description (300 chars), tags (10×15 chars)
- **Tag-based search**: Efficient categorization and discovery
- **Publisher tracking**: Accountability with staking
- **TTL + Staking**: Economic incentives for quality metadata

**Storage**:
```rust
pub struct RagMetadata<T: Config> {
    pub instruction_cid: [u8; 36],           // Instructions IPFS CID
    pub resource_cid: [u8; 36],              // Resources IPFS CID
    pub schema_cid: [u8; 36],                // JSON Schema IPFS CID
    pub steps: BoundedVec<[u8; 32], 64>,     // Workflow step hashes
    pub created_at: BlockNumber,             // Creation block
    pub expires_at: BlockNumber,             // TTL expiration
    pub staked_amount: Balance,              // Economic stake
    pub publisher: AccountId,                // Who published this
    pub name: BoundedVec<u8, 50>,            // Name (max 50 chars)
    pub description: BoundedVec<u8, 300>,    // Description (max 300 chars)
    pub tags: BoundedVec<BoundedVec<u8, 15>, 10>, // Tags for search
}
```

**Indexed by**: `Blake2-256(instruction_cid || resource_cid || schema_cid)` - Ensures uniqueness while enabling efficient lookups

**Use case**: 
1. A wine producer deploys a "Bordeaux 2024" workflow with tags: `["wine", "supply-chain", "luxury"]`
2. Each step is defined: Harvest → Fermentation → Bottling → Distribution → Retail
3. The workflow is stored as RAG metadata with IPFS CIDs pointing to detailed instructions
4. Anyone can search by tags and execute the workflow

---

### **Full Stack Architecture**

**Blockchain Layer (Substrate)**:
- Custom runtime with `pallet-pki`, `pallet-crypto-trail`, `pallet-rag`
- Deployed on Tanssi appchain infrastructure
- Block time: ~6 seconds
- Storage cost: ~0.01 tokens per trail entry (economic spam protection)

**Storage Layer (IPFS/Helia)**:
- Decentralized P2P IPFS node in browser (Helia.js)
- Encrypted workflow content stored off-chain
- IPFS CID v1 stored on-chain as 36-byte fixed arrays
- No centralized gateway dependency

**Frontend (React dApp)**:
- Live at [carge.fr](https://carge.fr)
- **AI Workflow Builder**: Natural language workflow creation with intelligent prompts
- **Batch deployment**: Single signature for multi-step workflows (parallel IPFS uploads)
- Polkadot.js integration for wallet connection
- SubWallet, Talisman, Polkadot.js extension support
- QR code scanning for mobile verification
- Real-time blockchain verification (<2s)
- Favorites system with local persistence for workflow management

**AI Integration (Dual Mode)**:
1. **Browser-based AI Builder** :
   - Copy/paste workflow requirements to ChatGPT/Claude
   - AI generates validated JSON conforming to blockchain limits
   - Iterative corrections with clear error messages
   - One-click deployment with automatic IPFS broadcasting
   
2. **MCP Server** (Advanced):
   - Model Context Protocol server for autonomous AI agents
   - Direct blockchain integration without human intervention
   - Compatible with Claude, Mistral, and other MCP clients

---

## 🚧 Challenges I ran into

### **The pivot challenge: From tech demo to usable product**

The code worked. The pallets were solid. But **Web3 Foundation rejected a 30K grant request** because they couldn't see the value for the ecosystem. The feedback was clear: **"Cool tech, but who will actually use this?"**

**That's what this hackathon was about**: Shifting from "technically impressive" to "accessible and valuable."

### **UX challenges solved during this hackathon**:

1. **Making blockchain invisible**: Non-technical creators don't want to learn about SCALE encoding or IPFS CIDs. The AI Builder hides all complexity behind natural language prompts.

2. **Reducing friction from 8+ signatures to 1**: Initially, deploying an 8-step workflow required 8 wallet confirmations (one per RAG). Users abandoned the process. Batch deployment (`api.tx.utility.batchAll`) solved this by bundling all transactions into a single atomic signature.

3. **Zero-install verification**: Requiring users to install IPFS or run a node = death for adoption. Browser-based Helia.js means anyone with a phone can scan and verify.

4. **AI prompt engineering for blockchain limits**: The hard part wasn't generating JSON—it was teaching AI models to respect strict Substrate limits (50 char names, 10 tags max, 64 steps) while enabling iterative corrections without regenerating everything.

### **Technical challenges solved (pre-hackathon)**:

1. **Cryptography complexity**: Implementing ECDH key exchange with ephemeral keys + ChaCha20-Poly1305 encryption in a pallet required deep understanding of Substrate's crypto primitives

2. **Fixed-size storage optimization**: All data structures use fixed-size arrays (no `Vec`) to enable `MaxEncodedLen` and optimize storage costs:
   - CID v1: 36 bytes (not 59-byte string)
   - Sr25519 signatures: 64 bytes
   - Peer IDs: 38 bytes (multihash format)

3. **TTL cleanup scalability**: Designed efficient block-based cleanup with bounded vectors (`BoundedVec<_, 1000>`) to prevent runtime bloat

4. **Hybrid on-chain/IPFS architecture**: Balancing cost (what goes on-chain) vs decentralization (what stays on IPFS)

5. **Browser-based IPFS**: Getting Helia.js (IPFS in browser) to work reliably with WebRTC and WebTransport for P2P connections, need a kubo node to work properly right now

6. **Chain of custody verification**: Ensuring authenticity by verifying that each step's creator matches the previous step's designated recipient, the steps are in chronological order, reconstructing the on-chain workflow hash to validate each step, ensuring data format matches the schema and the person in front of you is the last designated recipient

---

## 🏆 Accomplishments that I'm proud of

### **What changed during this hackathon: From tech to product**

**Pre-hackathon state** (solid tech, poor UX):
- ✅ 3 custom Substrate pallets deployed on Tanssi testnet
- ✅ Cryptographic workflow trails working
- ❌ Required 8+ wallet signatures to deploy a workflow (users gave up)
- ❌ No way for non-technical users to create workflows
- ❌ Command-line only for most operations

**Hackathon achievements** (making Polkadot accessible):
- ✅ **AI Workflow Builder**: Non-technical creators can now describe supply chains in natural language and deploy to blockchain in <5 minutes
- ✅ **Single-signature batch deployment**: Reduced friction by 88% (8 signatures → 1)
- ✅ **Browser-based everything**: Zero installation required for creation, execution, or verification
- ✅ **Favorites system**: Users can bookmark workflows, improving discoverability
- ✅ **Multilingual support** (EN/FR): Making Polkadot accessible beyond English speakers
- ✅ **Clear value proposition**: "Prove authenticity" for creators, "Verify provenance" for consumers

**Why this matters for Polkadot ecosystem**:
- **Brings non-developers to Substrate**: Coffee farmers don't code, but they need blockchain
- **Demonstrates AI as UX layer**: Shows how to make Substrate accessible to ordinary people
- **Real-world application**: Supply chain transparency is a $7.8B market, not a toy problem
- **Permissionless by design**: No gatekeepers, no KYC, anyone can deploy

### **Testing & validation**

- **2 months testnet uptime** with continuous operation
- **Stress testing via MCP AI agents**: Deployed dozens of workflows programmatically to test limits
- **Full workflow execution**: Multi-actor coordination working end-to-end
- **QR code verification**: Functional on mobile browsers (tested iOS Safari, Android Chrome)
- **No real users yet**: Currently in testing phase, seeking first pilot producers

---

## 📚 What I learned

### **Technical learnings**:

1. **Substrate forces good architecture**: The pallet system's strict requirements (storage versioning, weights, benchmarking) initially felt constraining but ultimately led to cleaner code

2. **Cryptography is hard but essential**: Implementing ECDH + ChaCha20-Poly1305 correctly requires understanding not just the algorithms but also nonce management, key derivation, and MAC verification

3. **Storage optimization matters**: In blockchain, every byte costs. Using fixed-size arrays instead of vectors saved ~60% storage costs

4. **TTL is necessary for scalability**: Without automatic cleanup, blockchain state grows unbounded. TTL with economic incentives (staking) creates a self-cleaning system

5. **Hybrid architectures are the future**: Pure on-chain doesn't scale; pure IPFS lacks verifiability. The combination (CIDs on-chain, content on IPFS) is optimal

6. **AI as the ultimate UX layer**: Blockchain complexity (CID formats, SCALE encoding, transaction batching) can be completely hidden behind conversational AI. Users describe what they want; AI handles the cryptographic details. This democratizes Web3 far beyond what traditional UIs can achieve.

### **Business learnings**:

1. **Supply chain transparency is a $7.8B market** - Luxury goods, pharmaceuticals, aerospace parts need verifiable provenance to build consumer trust and product value

2. **"Blockchain" is still a red flag** - Enterprises are skeptical. Reframing as "cryptographic audit trail" or "zero-trust supply chain" gets better reception

3. **QR codes are the killer UX** - Consumers understand "scan to verify." They don't need to know about Substrate or IPFS

4. **AI makes Web3 accessible** - Enterprises struggle with blockchain complexity. An AI that can interview stakeholders, understand business requirements, and deploy production workflows in 5 minutes removes the technical barrier. This is the bridge between Web2 and Web3.

5. **On-chain coordination eliminates trust friction** - Traditional supply chains rely on email, PDFs, and phone calls between actors who don't trust each other. CARGE lets them exchange encrypted deliverables on-chain without revealing data to competitors. The blockchain becomes the trusted intermediary.

6. **Solo founding is viable but exhausting** - Technical execution is achievable alone. Business development while coding full-time is the real bottleneck

7. **AI pair programming changed everything** - Building Substrate pallets, React frontends, and cryptographic protocols solo became feasible with AI assistants. What would have taken a team of 3-4 developers was achievable by one person with Claude/Cursor. This validates the "AI-augmented solo founder" model.

### **Personal growth**:

Transitioning from military to tech entrepreneurship taught me that **leadership in decentralized systems requires different skills**: 
- expression clear intentions for the AI to code instead of giving orders
- Building consensus through code instead of enforcing hierarchy
- Trusting cryptography instead of trusting people

---

## 🚀 What's next for Carge

### **Q1 2026 - First real users**:

1. **3-5 pilot producers** (wine, coffee, craft spirits)
   - Onboarding with personalized support
   - Iterate based on feedback from non-technical users
   - Goal: 500 products with verifiable proofs

2. **Mobile PWA optimization**
   - Better QR scanning UX for iOS/Android browsers
   - Offline verification caching
   - Share proof via social media

3. **Video tutorials & documentation**
   - Step-by-step guides for creators
   - Translated content (FR, ES initially)

### **Q2-Q3 2026 - Distribution partnerships**:

4. **Retail partner pilot** (organic shops, specialty stores)
   - Train staff on QR verification
   - Consumer education campaigns
   - Goal: 2,000 verified products in circulation

5. **AI Workflow Templates**
   - Pre-built workflows for common use cases (wine, coffee, olive oil, honey)
   - Community-contributed templates
   - One-click fork and customize

6. **Analytics dashboard**
   - Producers see how many consumers verified their products
   - Engagement metrics, trust signals

### **Q4 2026 - Ecosystem growth**:

7. **Polkadot Treasury grant application** (second attempt)
   - With real user metrics and producer testimonials
   - Open-source pallets for community reuse
   - Target: 10,000 verified products

8. **MCP Agent Marketplace**
   - AI agents can deploy and execute workflows autonomously
   - Integration with enterprise ERPs (SAP, Oracle)

### **2027+ - Scale & sustainability**:

**Vision**: Make blockchain-verified supply chains as common as QR codes on products.

**Realistic goal**: 50,000 verified products by end 2027 (not 1 million—learned to be realistic)

**Why this matters**:
- Consumers pay premium for verifiable provenance
- Producers build direct relationships with customers
- Trust becomes measurable through cryptographic proof
- Fraud naturally eliminated as side effect

---

## 🎬 Live Demo

**Deployed at**: [carge.fr](https://carge.fr)

### **Try the demo**:

**Option 1: AI Workflow Builder** (Recommended)
1. **Go to "AI" page** → Click "How It Works"
2. **Copy the AI prompt** → Paste into ChatGPT/Claude
3. **Describe your supply chain** (e.g., "wine from vineyard to customer")
4. **AI generates complete workflow JSON** with validation
5. **Paste JSON back** → Deploy with single wallet signature
6. **Watch deployment**:
   - Parallel IPFS uploads (schemas, instructions, resources)
   - Batch transaction preparation
   - Single signature for entire workflow
   - Automatic IPFS broadcasting to public gateways
7. **Execute workflow** → Add to favorites → Start first step

**Option 2: Verify Existing Proof**
1. **Go to "Verify" page** → Upload the example proof file or scan QR code
2. **Watch real-time verification**:
   - Searching blockchain for proof
   - Verifying Substrate signature
   - Reconstructing workflow history
   - Checking chain of trust
3. **See full workflow history** with step-by-step breakdown
4. **Test product QR verification** by scanning the product QR code

### **Technical flow**:

```mermaid
graph TB
    A[Alice: Gets proof off-chain or o-nchain] --> B[Alice: Uploads proof to Verify page]
    B --> C[Verify workflow continuity from producer]
    C --> D[Check last signature is Bob's]
    D --> E[Alice: Scans product QR code]
    E --> F[Verify QR matches first step producer]
    F --> G[Alice: Buys bottle from Bob]
    G --> H[Bob: Completes workflow step]
    H --> I[Bob: Sets Alice as next recipient]
    I --> J[Cryptographic chain of custody verified]
```

---

## 📊 Key Metrics

| Metric | Value | Notes |
|--------|-------|-------|
| **AI workflow creation** | <5min | From natural language to deployed workflow |
| **Signature reduction** | 88% | 8 signatures → 1 via batch deployment |
| **Proof verification** | <2s | 5-10x faster than v1 (no longer blocking) |
| **Storage efficiency** | 99% reduction | Hybrid on-chain/IPFS vs pure on-chain |
| **Testnet uptime** | 2+ months | Continuous operation, zero downtime |
| **Workflows deployed** | ~40 | Via MCP AI agent stress testing |
| **Real users** | 0 (testing phase) | Seeking first 3-5 pilot producers |
| **Custom pallets** | 3 | PKI, Crypto Trail, RAG |
| **Code written** | ~5,500 lines | 1,500 Rust + 4,000 React |
| **Test coverage** | >80% | Pallet unit + integration tests |
| **Browser compatibility** | ✅ All modern | Chrome, Safari, Firefox, Edge |
| **Mobile QR scanning** | ✅ iOS + Android | PWA-based, zero install |

### **Why Polkadot / Substrate?**

| **Alternative** | **Why Not** | **Polkadot Advantage** |
|-----------------|-------------|------------------------|
| **Ethereum** | High gas costs, no native encrypted storage, complex upgrades | Substrate: Low-cost Tanssi appchain, forkless upgrades, native crypto primitives |
| **Solana** | Centralized validator set, network outages, poor tooling for custom logic | Polkadot: Shared security, proven stability, flexible pallet system |
| **Hyperledger** | Permissioned, consortium control, deployment complexity | Substrate: Permissionless by default, anyone can deploy |
| **Centralized DB** | Single point of failure, no cryptographic proof, rent-seeking intermediary | Polkadot: Decentralized, cryptographic guarantees, no middleman |

**What Substrate enables for Carge**:
- ✅ **Custom crypto primitives** (X25519, ChaCha20-Poly1305) without smart contract gas limits
- ✅ **Fixed-size storage optimization** (MaxEncodedLen) impossible in EVM
- ✅ **Forkless upgrades** for iterating based on user feedback
- ✅ **Tanssi shared security** without running own validator set
- ✅ **Low transaction costs** critical for small producers

---

## 🔐 Security Considerations

### **Cryptographic Security**:

- **ECDH key exchange**: Ephemeral keys prevent replay attacks
- **ChaCha20-Poly1305**: Authenticated encryption ensures confidentiality + integrity
- **Sr25519 signatures**: Schnorr signatures on Ristretto group (128-bit security)
- **Blake2 hashing**: Fast, secure hashing for content and metadata
- **Nonce uniqueness**: Separate nonces for CID and content encryption

### **Economic Security**:

- **Staking requirements**: Minimum stake for PKI profiles, crypto trails, and RAG metadata
- **TTL cleanup**: Expired entries automatically unstaked and removed
- **Slashing**: Malicious publishers can be slashed (treasury receives funds)
- **Anti-spam**: Economic cost prevents blockchain bloat

### **Operational Security**:


- **Decentralized storage**: No single point of failure (IPFS)
- **Browser-based verification**: No server dependency for proof checking
- **Open source**: Transparent, auditable code
- **Substrate security**: Inherits Polkadot's security model

---

## 🛠️ Technical Stack Summary

| Component | Technology | Purpose |
|-----------|-----------|---------|
| **Blockchain** | Substrate (Rust) | Custom runtime with 3 pallets |
| **Consensus** | Tanssi appchain | Shared security + block production |
| **Storage** | IPFS (Helia.js) | Decentralized content storage |
| **Crypto** | X25519 + Sr25519 | ECDH key exchange + Schnorr signatures |
| **Encryption** | ChaCha20-Poly1305 | Authenticated encryption |
| **Frontend** | React + Vite + TailwindCSS | Progressive Web App |
| **Wallet** | Polkadot.js, SubWallet, Talisman | Substrate account management |
| **AI Integration** | Dual: Browser prompts + MCP | Human-AI and AI-AI workflows |
| **Batch Transactions** | `api.tx.utility.batchAll` | Atomic multi-step deployment |
| **QR Codes** | jsQR | Mobile verification |
| **State Management** | LocalStorage + React Context | Favorites & user preferences |

---

## 🎯 Hackathon Categories

### **Real-World Applications**

- **Product valorization for creators**: Artisans, craftsmen, small producers, and luxury brands all need verifiable provenance to differentiate authentic products and build direct consumer relationships
- **Supply chain transparency**: Cryptographic guarantees for any multi-party workflow (food, manufacturing, pharmaceuticals, art, etc.)
- **Consumer empowerment**: QR code verification puts authenticity proof in customers' hands
- **Zero technical barrier**: Non-technical creators can deploy production-grade workflows via AI in minutes

---

## 📞 Contact & Links

- **Live dApp**: [carge.fr](https://carge.fr)
- **Email**: contact@carge.fr
- **GitHub**: https://github.com/polykrate
---

## 🙏 Thank you

To the Polkadot community for building the infrastructure that makes projects like Carge possible. 

From a military officer who once coordinated logistics in war zones, to a solo founder building decentralized trust systems—**this is what decentralization looks like in practice**.

---

**Carge: Code as Law**


